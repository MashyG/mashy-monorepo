/**
 * ES6 值比较方法
 * Object.is()
 * 用于判断两个值是否严格相等，它不进行类型转换
 * 对于比较复杂的数据类型如对象，只有当它们引用同一内存地址时才认为相等。
 *
 * Object.is()方法与严格相等运算符(===)的行为基本一致，但存在两个主要区别：
 *
 * 1. Object.is()不会进行强制类型转换，而 === 在某些情况下会进行类型转换。
 * 2. Object.is()认为 +0 不等于 -0，而=认为 +0 等于 -0。同时，Object.is()认为 NaN 等于自身，而 = 不认为 NaN 等于自身。
 */

export const isSame = (oldVal: any, newVal: any): boolean =>
  Object.is(oldVal, newVal);

/**
 * 按位与（&）运算，检查多个标志位的状态   ----   1&2 => 0; 2&2 => 2
 * 按位或（|）运算，组合多个标志位      ----   1|2 => 3; 2|2 => 2
 */
